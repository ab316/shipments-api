generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String     @id @default(uuid()) @db.Uuid
  email     String     @unique @db.VarChar(250)
  createdAt DateTime   @default(now()) @db.Timetz
  updatedAt DateTime   @default(now()) @db.Timetz
  Shipments Shipment[]
}

model Shipment {
  id         String   @id @default(uuid()) @db.Uuid
  customerId String   @db.Uuid
  Customer   Customer @relation(fields: [customerId], references: [id])
  fromRegion String
  toRegion   String
  weight     String
  price      Int
  createdAt  DateTime @default(now()) @db.Timetz
  updatedAt  DateTime @default(now()) @db.Timetz

  FromRegion  Region      @relation("fromRegion", fields: [fromRegion], references: [name])
  ToRegion    Region      @relation("toRegion", fields: [toRegion], references: [name])
  WeightClass WeightClass @relation(fields: [weight], references: [name])
}

model Region {
  name      String    @id @unique
  countries Country[]
  createdAt DateTime  @default(now()) @db.Timetz
  updatedAt DateTime  @default(now()) @db.Timetz

  FromPricings  RegionPricing[] @relation("fromRegion")
  ToPricings    RegionPricing[] @relation("toRegion")
  FromShipments Shipment[]      @relation("fromRegion")
  ToShipments   Shipment[]      @relation("toRegion")
}

model Country {
  isoCode   String   @unique @db.Char(2)
  region    String
  Region    Region   @relation(fields: [region], references: [name])
  createdAt DateTime @default(now()) @db.Timetz
  updatedAt DateTime @default(now()) @db.Timetz
}

model RegionPricing {
  id              String   @id @default(uuid()) @db.Uuid
  fromRegion      String
  toRegion        String
  FromRegion      Region   @relation("fromRegion", fields: [fromRegion], references: [name])
  ToRegion        Region   @relation("toRegion", fields: [toRegion], references: [name])
  priceMultiplier Float    @db.DoublePrecision
  createdAt       DateTime @default(now()) @db.Timetz
  updatedAt       DateTime @default(now()) @db.Timetz

  @@unique([fromRegion, toRegion])
}

model WeightClass {
  name           String   @id @unique
  price          Int
  lower          Int
  upper          Int
  upperInclusive Boolean  @default(false)
  createdAt      DateTime @default(now()) @db.Timetz
  updatedAt      DateTime @default(now()) @db.Timetz

  Shipments Shipment[]
}
